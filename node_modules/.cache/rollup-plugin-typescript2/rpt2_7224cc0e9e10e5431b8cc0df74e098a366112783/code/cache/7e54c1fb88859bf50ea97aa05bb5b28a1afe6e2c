{"code":"import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport * as crypto from \"crypto\";\r\nimport { ImageCompressor } from \"./ImageCompressor\";\r\nconst images = require(\"../node_modules/images/index\");\r\nexport class DefinitionTool {\r\n    constructor() {\r\n        /**\r\n         * 默认品质\r\n         */\r\n        this.defaultQuality = \"80-90\";\r\n        this.finishIndex = 0;\r\n        this.total = 0;\r\n        this.oldFileConfigMap = new Map();\r\n        this.customQualityMap = new Map();\r\n        this.fileMD5List = [];\r\n        this.excludeMap = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param assets        工程assets路径\r\n     * @param lowDefinitionAssets     低清晰度路径\r\n     * @param dConfig           自定义设置\r\n     * @param fileConfigs       上次处理记录\r\n     */\r\n    start(assets, lowDefinitionAssets, configPath, fileRecordPath) {\r\n        let dConfig;\r\n        let fileConfigs;\r\n        if (configPath) {\r\n            if (fs.existsSync(configPath)) {\r\n                let data = fs.readFileSync(configPath, \"utf-8\");\r\n                dConfig = JSON.parse(data);\r\n            }\r\n        }\r\n        if (fileRecordPath) {\r\n            if (fs.existsSync(fileRecordPath)) {\r\n                let data = fs.readFileSync(fileRecordPath, \"utf-8\");\r\n                fileConfigs = JSON.parse(data);\r\n            }\r\n            this.fileRecordPath = fileRecordPath;\r\n        }\r\n        //先确定两个路径是否正确\r\n        if (!fs.existsSync(assets) || !fs.existsSync(lowDefinitionAssets)) {\r\n            throw new Error(\"assets或assetsLD 文件夹不存在！\");\r\n        }\r\n        let assetsStats = fs.statSync(assets);\r\n        let assetsLDStats = fs.statSync(lowDefinitionAssets);\r\n        if (!assetsStats.isDirectory() || !assetsLDStats.isDirectory()) {\r\n            throw new Error(\"assets或assetsLD 必须是文件夹\");\r\n        }\r\n        //默认品质\r\n        this.defaultQuality = dConfig ? dConfig.defaultQuality : \"80-90\";\r\n        //老的文件记录\r\n        this.oldFileConfigMap.clear();\r\n        if (fileConfigs && fileConfigs.length) {\r\n            let fileConfig;\r\n            for (let index = 0; index < fileConfigs.length; index++) {\r\n                fileConfig = fileConfigs[index];\r\n                this.oldFileConfigMap.set(fileConfig.file, fileConfig);\r\n            }\r\n        }\r\n        //排除列表\r\n        this.excludeMap.clear();\r\n        if (dConfig) {\r\n            for (let index = 0; index < dConfig.exclude.length; index++) {\r\n                const file = dConfig.exclude[index];\r\n                if (this.excludeMap.has(file)) {\r\n                    console.error(\"definitionConfig.json中的exclude列表存在重复：\" + file);\r\n                }\r\n                this.excludeMap.set(file, file);\r\n            }\r\n        }\r\n        //自定义品质\r\n        this.customQualityMap.clear();\r\n        if (dConfig) {\r\n            for (let index = 0; index < dConfig.customs.length; index++) {\r\n                const qualityData = dConfig.customs[index];\r\n                if (this.customQualityMap.has(qualityData.file)) {\r\n                    console.error(\"definitionConfig.json中的customs列表存在重复：\" + qualityData.file);\r\n                }\r\n                this.customQualityMap.set(qualityData.file, qualityData.quality);\r\n            }\r\n        }\r\n        //构建所有文件列表\r\n        console.log(\"开始构建MD5文件列表.\");\r\n        this.__buildFileMD5(assets, assets, this.fileMD5List);\r\n        console.log(\"MD5文件数量：\" + this.fileMD5List.length);\r\n        console.log(\"开始计算有多少需要压缩的图片.\");\r\n        let result = this.__buildFileList(assets);\r\n        console.log(\"需要压缩的图片数量：\" + result.length);\r\n        if (result.length) {\r\n            let imageCompressor = new ImageCompressor();\r\n            imageCompressor.start(assets, lowDefinitionAssets, result, this.oldFileConfigMap, this.compressComplete.bind(this));\r\n        }\r\n        else {\r\n            //不需要压缩\r\n            console.log(\"不需要压缩！！！\");\r\n        }\r\n    }\r\n    compressComplete() {\r\n        if (this.oldFileConfigMap.size == 0) {\r\n            throw new Error(\"没有发现任何图片！\");\r\n        }\r\n        let list = [];\r\n        let values = this.oldFileConfigMap.values();\r\n        let next = values.next();\r\n        while (!next.done) {\r\n            list.push(next.value);\r\n            next = values.next();\r\n        }\r\n        let jsonStr = JSON.stringify(list, null, 2);\r\n        if (this.fileRecordPath) {\r\n            fs.writeFileSync(this.fileRecordPath, jsonStr);\r\n            console.log(\"fileConfig.json保存完毕:\" + this.fileRecordPath);\r\n        }\r\n    }\r\n    getQuality(assetRoot, fileRelativePath) {\r\n        //如果直接找到了自定义品质\r\n        if (this.customQualityMap.has(fileRelativePath)) {\r\n            return this.customQualityMap.get(fileRelativePath);\r\n        }\r\n        //递归父容器是否定义了品质\r\n        let dirName = path.dirname(fileRelativePath);\r\n        while (true) {\r\n            //如果父级文件夹定义了品质\r\n            if (this.customQualityMap.has(dirName)) {\r\n                return this.customQualityMap.get(dirName);\r\n            }\r\n            dirName = path.dirname(dirName);\r\n            if (dirName == \".\") {\r\n                break;\r\n            }\r\n        }\r\n        return this.defaultQuality;\r\n    }\r\n    __buildFileList(assetsPath) {\r\n        let result = [];\r\n        //对比MD5得出那些文件需要重新生成\r\n        let currentFile;\r\n        let oldFile;\r\n        for (let index = 0; index < this.fileMD5List.length; index++) {\r\n            currentFile = this.fileMD5List[index];\r\n            //老的列表中没有，说明是新的\r\n            if (!this.oldFileConfigMap.has(currentFile.file)) {\r\n                result.push({\r\n                    file: currentFile.file,\r\n                    quality: this.getQuality(assetsPath, currentFile.file),\r\n                    md5: currentFile.md5\r\n                });\r\n                continue;\r\n            }\r\n            oldFile = this.oldFileConfigMap.get(currentFile.file);\r\n            //如果再自定义列表中\r\n            if (this.customQualityMap.has(currentFile.file)) {\r\n                const customQualtiy = this.customQualityMap.get(currentFile.file);\r\n                //如果自定义品质和上次的品质不同则需要重新构建\r\n                if (oldFile.quality != customQualtiy) {\r\n                    result.push({\r\n                        file: currentFile.file,\r\n                        quality: customQualtiy,\r\n                        md5: currentFile.md5\r\n                    });\r\n                    continue;\r\n                }\r\n            }\r\n            oldFile = this.oldFileConfigMap.get(currentFile.file);\r\n            //MD5不相同\r\n            if (currentFile.md5 !== oldFile.md5) {\r\n                result.push({\r\n                    file: currentFile.file,\r\n                    quality: this.getQuality(assetsPath, currentFile.file),\r\n                    md5: currentFile.md5\r\n                });\r\n                continue;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    __buildFileMD5(root, assetsPath, out) {\r\n        let fileList = fs.readdirSync(assetsPath);\r\n        let filePath, status;\r\n        let fileBuffer;\r\n        let md5Code;\r\n        let md5;\r\n        let relativePath;\r\n        let extname;\r\n        for (let index = 0; index < fileList.length; index++) {\r\n            filePath = assetsPath + \"/\" + fileList[index];\r\n            status = fs.statSync(filePath);\r\n            relativePath = path.relative(root, filePath);\r\n            if (this.excludeMap.has(relativePath)) {\r\n                console.log(\"排除：\" + filePath);\r\n                continue;\r\n            }\r\n            if (status.isFile()) {\r\n                extname = path.extname(filePath);\r\n                extname = extname.toLocaleLowerCase();\r\n                if (extname != \".png\" && extname != \".jpg\") {\r\n                    continue;\r\n                }\r\n                if (filePath.indexOf(\"-m.\") >= 0) {\r\n                    continue;\r\n                }\r\n                fileBuffer = fs.readFileSync(filePath, { encoding: \"binary\" });\r\n                md5 = crypto.createHash(\"md5\");\r\n                md5Code = md5.update(fileBuffer).digest().toString(\"hex\");\r\n                relativePath = relativePath.replace(/\\\\/g, \"/\");\r\n                out.push({ file: relativePath, md5: md5Code });\r\n            }\r\n            else {\r\n                this.__buildFileMD5(root, filePath, out);\r\n            }\r\n        }\r\n    }\r\n}\r\n","references":["D:/DefinitionTool/src/ImageCompressor.ts","D:/DefinitionTool/node_modules/images/index.d.ts"]}
