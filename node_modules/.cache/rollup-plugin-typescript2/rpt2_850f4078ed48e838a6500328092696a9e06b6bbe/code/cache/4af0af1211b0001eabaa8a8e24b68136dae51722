{"code":"import { CMDData } from \"../CMDData\";\r\nimport { Task } from \"../drongo/task/Task\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport * as crypto from \"crypto\";\r\nimport { DrongoEvent } from \"../drongo/events/DrongoEvent\";\r\nconst imageinfo = require(\"imageinfo\");\r\nexport class CalculateImageMD5Task extends Task {\r\n    constructor() {\r\n        super();\r\n        this.illegalFiles = [];\r\n    }\r\n    start() {\r\n        let root = CMDData.data.input;\r\n        let dir = root;\r\n        let out = CMDData.data.fileMD5List = [];\r\n        this.buildFileMD5(root, dir, out);\r\n        // if(this.illegalFiles.length){\r\n        //     this.dispatchEvent(DrongoEvent.ERROR,this.illegalFiles);\r\n        // }else{\r\n        this.dispatchEvent(DrongoEvent.COMPLETE);\r\n        // }\r\n    }\r\n    buildFileMD5(root, dir, out) {\r\n        let fileList = fs.readdirSync(dir);\r\n        let filePath, status;\r\n        let fileBuffer;\r\n        let md5Code;\r\n        let md5;\r\n        let relativePath;\r\n        let extname;\r\n        let trueType;\r\n        let info;\r\n        for (let index = 0; index < fileList.length; index++) {\r\n            filePath = dir + \"/\" + fileList[index];\r\n            status = fs.statSync(filePath);\r\n            relativePath = path.relative(root, filePath);\r\n            relativePath = relativePath.replace(/\\\\/g, \"/\");\r\n            if (this.excludeMap && this.excludeMap.has(relativePath)) {\r\n                continue;\r\n            }\r\n            if (status.isFile()) {\r\n                extname = path.extname(filePath);\r\n                extname = extname.toLocaleLowerCase();\r\n                // if (extname != \".png\" && extname != \".jpg\") {\r\n                if (extname != \".png\") {\r\n                    continue;\r\n                }\r\n                if (filePath.indexOf(\"-m.\") >= 0) {\r\n                    continue;\r\n                }\r\n                fileBuffer = fs.readFileSync(filePath);\r\n                md5 = crypto.createHash(\"md5\");\r\n                md5Code = md5.update(fileBuffer).digest().toString(\"hex\");\r\n                info = imageinfo(fileBuffer);\r\n                //真实类型\r\n                trueType = \".\" + info.format.toLocaleLowerCase();\r\n                if (extname != trueType) {\r\n                    this.illegalFiles.push(\"文件后缀\" + extname + \" 真实类型\" + trueType + \" \" + relativePath);\r\n                }\r\n                else {\r\n                    out.push({ file: relativePath, md5: md5Code });\r\n                }\r\n            }\r\n            else {\r\n                this.buildFileMD5(root, filePath, out);\r\n            }\r\n        }\r\n    }\r\n    get excludeMap() {\r\n        return CMDData.data.excludeMap;\r\n    }\r\n}\r\n","references":["D:/DefinitionTool/src/CMDData.ts","D:/DefinitionTool/src/drongo/task/Task.ts","D:/DefinitionTool/src/drongo/events/DrongoEvent.ts","D:/DefinitionTool/node_modules/imageinfo/index.js"]}
