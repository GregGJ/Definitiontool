{"code":"import { CMDData } from \"../CMDData\";\r\nimport { TaskQueue } from \"../drongo/task/TaskQueue\";\r\nimport { CalculateImageMD5Task } from \"./CalculateImageMD5Task\";\r\nimport { CalculateImageListTask } from \"./CalculateImageListTask\";\r\nimport { ImageCompressorTask } from \"./ImageCompressorTask\";\r\nimport * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nexport class ImageCompressorPipeline extends TaskQueue {\r\n    constructor() {\r\n        super();\r\n        this.addTask(new CalculateImageMD5Task());\r\n        this.addTask(new CalculateImageListTask());\r\n        this.addTask(new ImageCompressorTask());\r\n    }\r\n    start(data) {\r\n        this.__init();\r\n        super.start(data);\r\n    }\r\n    allComplete() {\r\n        if (CMDData.data.fileConfigs.size == 0) {\r\n            throw new Error(\"没有发现任何图片！\");\r\n        }\r\n        let list = [];\r\n        let values = CMDData.data.fileConfigs.values();\r\n        let next = values.next();\r\n        while (!next.done) {\r\n            list.push(next.value);\r\n            next = values.next();\r\n        }\r\n        let jsonStr = JSON.stringify(list, null, 2);\r\n        if (CMDData.data.fileRecordPath) {\r\n            fs.writeFileSync(CMDData.data.fileRecordPath, jsonStr);\r\n            console.log(\"fileConfigs.json保存完毕: \" + CMDData.data.fileRecordPath);\r\n        }\r\n        super.allComplete();\r\n    }\r\n    __init() {\r\n        //验证路径\r\n        //先确定两个路径是否正确\r\n        if (!fs.existsSync(CMDData.data.input) || !fs.existsSync(CMDData.data.output)) {\r\n            throw new Error(\"input或output 文件夹不存在！\");\r\n        }\r\n        let assetsStats = fs.statSync(CMDData.data.input);\r\n        let assetsLDStats = fs.statSync(CMDData.data.output);\r\n        if (!assetsStats.isDirectory() || !assetsLDStats.isDirectory()) {\r\n            throw new Error(\"input或output 必须是文件夹\");\r\n        }\r\n        //读取两个配置文件\r\n        let configPath;\r\n        if (CMDData.data.configPath) {\r\n            configPath = CMDData.data.configPath;\r\n        }\r\n        else {\r\n            configPath = path.parse(CMDData.data.input).dir + \"/definitions/definitionConfig.json\";\r\n        }\r\n        if (configPath) {\r\n            if (fs.existsSync(configPath)) {\r\n                let data = fs.readFileSync(configPath, \"utf-8\");\r\n                CMDData.data.config = JSON.parse(data);\r\n            }\r\n        }\r\n        //文件记录\r\n        let fileRecordPath = CMDData.data.output + \"/fileConfigs.json\";\r\n        let fileConfigList;\r\n        if (fileRecordPath) {\r\n            if (fs.existsSync(fileRecordPath)) {\r\n                let data = fs.readFileSync(fileRecordPath, \"utf-8\");\r\n                fileConfigList = JSON.parse(data);\r\n            }\r\n            CMDData.data.fileRecordPath = fileRecordPath;\r\n        }\r\n        //老的文件记录\r\n        CMDData.data.fileConfigs = new Map();\r\n        if (fileConfigList && fileConfigList.length) {\r\n            let fileConfig;\r\n            for (let index = 0; index < fileConfigList.length; index++) {\r\n                fileConfig = fileConfigList[index];\r\n                CMDData.data.fileConfigs.set(fileConfig.file, fileConfig);\r\n            }\r\n        }\r\n        //解析清晰度配置\r\n        this.__decodeDefinitionConfig();\r\n    }\r\n    __decodeDefinitionConfig() {\r\n        //默认品质\r\n        CMDData.data.defaultQuality = CMDData.data.config ? CMDData.data.config.defaultQuality : \"80-90\";\r\n        //排除列表\r\n        CMDData.data.excludeMap = new Map();\r\n        if (CMDData.data.config) {\r\n            for (let index = 0; index < CMDData.data.config.exclude.length; index++) {\r\n                const file = CMDData.data.config.exclude[index];\r\n                if (CMDData.data.config.excludeMap.has(file)) {\r\n                    console.error(\"definitionConfig.json中的exclude列表存在重复：\" + file);\r\n                }\r\n                CMDData.data.config.excludeMap.set(file, file);\r\n            }\r\n        }\r\n        //自定义品质\r\n        CMDData.data.customQualityMap = new Map();\r\n        if (CMDData.data.config) {\r\n            for (let index = 0; index < CMDData.data.config.customs.length; index++) {\r\n                const qualityData = CMDData.data.config.customs[index];\r\n                if (CMDData.data.customQualityMap.has(qualityData.file)) {\r\n                    console.error(\"definitionConfig.json中的customs列表存在重复：\" + qualityData.file);\r\n                }\r\n                CMDData.data.customQualityMap.set(qualityData.file, qualityData.quality);\r\n            }\r\n        }\r\n    }\r\n}\r\n","references":["D:/DefinitionTool/src/CMDData.ts","D:/DefinitionTool/src/drongo/task/TaskQueue.ts","D:/DefinitionTool/src/imageCompressors/CalculateImageMD5Task.ts","D:/DefinitionTool/src/imageCompressors/CalculateImageListTask.ts","D:/DefinitionTool/src/imageCompressors/ImageCompressorTask.ts"]}
