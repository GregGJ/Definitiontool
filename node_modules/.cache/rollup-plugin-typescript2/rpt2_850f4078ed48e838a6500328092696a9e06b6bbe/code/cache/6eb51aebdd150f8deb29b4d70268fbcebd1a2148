{"code":"import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport * as child_process from \"child_process\";\r\nimport { CMDData } from \"../CMDData\";\r\nimport { DrongoEvent } from \"../drongo/events/DrongoEvent\";\r\nimport { Task } from \"../drongo/task/Task\";\r\nconst images = require(\"../node_modules/images/index\");\r\nexport class ImageCompressorTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.__workIndex = 0;\r\n        this.__workCount = 10;\r\n    }\r\n    start(data) {\r\n        this.tryNexts();\r\n    }\r\n    tryNexts() {\r\n        var _a;\r\n        if (this.imageList && this.imageList.length != 0) {\r\n            let file;\r\n            let extname;\r\n            while (this.__workIndex < this.__workCount && this.imageList.length) {\r\n                file = this.imageList.shift();\r\n                this.__workIndex++;\r\n                extname = path.extname(file.file);\r\n                extname.toLocaleLowerCase();\r\n                if (extname == \".png\") {\r\n                    this.__pngCompress(file);\r\n                }\r\n                else {\r\n                    this.__jpgCompress(file);\r\n                }\r\n                console.log(\"图片压缩中：\" + ((_a = this.imageList) === null || _a === void 0 ? void 0 : _a.length));\r\n            }\r\n        }\r\n        else {\r\n            this.dispatchEvent(DrongoEvent.COMPLETE);\r\n        }\r\n    }\r\n    __pngCompress(file, speed = 3) {\r\n        let input = this.input + \"/\" + file.file;\r\n        let output = this.output + \"/\" + file.file;\r\n        //压缩产生的文件名\r\n        let m_fileName = file.file.replace(\".png\", \"\") + \"-m.png\";\r\n        let cmd = this.pngquantExe;\r\n        cmd += \" --quality \" + file.quality;\r\n        cmd += \" --speed \" + speed;\r\n        cmd += \" --force\";\r\n        cmd += \" --ext -m.png\";\r\n        cmd += \" \" + input;\r\n        var childProcess = child_process.exec(cmd, (err, data) => {\r\n            if (err) {\r\n                if (err.message.indexOf(\"Not a PNG file\") >= 0) {\r\n                    console.warn(\"Not a PNG file \" + file.file);\r\n                }\r\n                else {\r\n                    this.mkDirbyFile(output);\r\n                    fs.copyFileSync(input, output);\r\n                    this.fileConfigs.set(file.file, file);\r\n                }\r\n            }\r\n            else {\r\n                this.mkDirbyFile(output);\r\n                fs.renameSync(this.input + \"/\" + m_fileName, output);\r\n                this.fileConfigs.set(file.file, file);\r\n            }\r\n            this.__workIndex--;\r\n            childProcess.kill();\r\n            this.tryNexts();\r\n        });\r\n    }\r\n    __jpgCompress(file) {\r\n        let output = this.output + \"/\" + file.file;\r\n        this.mkDirbyFile(output);\r\n        let quality;\r\n        if (file.quality.indexOf(\"-\") >= 0) {\r\n            let arr = file.quality.split(\"-\");\r\n            quality = Number(arr[0]);\r\n        }\r\n        else {\r\n            quality = Number(file.quality);\r\n        }\r\n        images(this.input + \"/\" + file.file).save(output, { quality: quality });\r\n        this.fileConfigs.set(file.file, file);\r\n        this.__workIndex--;\r\n        this.tryNexts();\r\n    }\r\n    /**\r\n     * 递归创建所有父级文件夹\r\n     * @param file\r\n     */\r\n    mkDirbyFile(file) {\r\n        file = path.resolve(file);\r\n        file = file.replace(/\\\\/g, \"/\");\r\n        const fileName = file.split(\"/\")[file.split(\"/\").length - 1];\r\n        file = file.replace(fileName, \"\");\r\n        fs.mkdirSync(file, { recursive: true });\r\n    }\r\n    get fileConfigs() {\r\n        return CMDData.data.fileConfigs;\r\n    }\r\n    get pngquantExe() {\r\n        return CMDData.data.pngquantExe;\r\n    }\r\n    get input() {\r\n        return CMDData.data.input;\r\n    }\r\n    get output() {\r\n        return CMDData.data.output;\r\n    }\r\n    get imageList() {\r\n        return CMDData.data.imageList;\r\n    }\r\n}\r\n","references":["D:/DefinitionTool/src/CMDData.ts","D:/DefinitionTool/src/drongo/events/DrongoEvent.ts","D:/DefinitionTool/src/drongo/task/Task.ts"]}
